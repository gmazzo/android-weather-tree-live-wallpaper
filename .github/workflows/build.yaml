name: Build
on:
  workflow_dispatch:
  workflow_call:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: published

permissions:
  contents: read
  checks: write
  pull-requests: write

env:
  ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.SIGNING_PASSWORD }}
  ORG_GRADLE_PROJECT_reverseGeocodingKey: ${{ secrets.REVERSE_GEOCODING_KEY }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup host
        uses: ./.github/actions/setup-host
        with:
          gradle-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
      - name: Test & Build
        run: ./gradlew build
      - name: Publish Test Report
        if: ${{ !cancelled() }}
        uses: gmazzo/publish-report-annotations@v1
        with:
          checkName: Test Results
      - name: Upload build reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: reports
          path: '**/build/reports'
      - name: Coverage report
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: '**/build/reports/jacoco/**/*.xml'

  screenshot-tests:
    name: Screenshot Tests
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      checks: write
      pull-requests: write
    env:
      UPDATE_SCREENSHOTS: ${{ contains(github.event.pull_request.labels.*.name, 'update screenshots') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GRADLE_WRAPPER_UPDATER_TOKEN }} # will push a commit
      - name: Setup host
        uses: ./.github/actions/setup-host
        with:
          gradle-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
      - name: Setup Emulator dependencies
        run: sudo apt-get install libx11-dev
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.FIREBASE_TESTLAB_CREDENTIALS }}
      - name: Run UI tests
        run: ./gradlew firebaseTestLabCheck ${{ fromJSON(env.UPDATE_SCREENSHOTS) && 'updateScreenshotTest updateSnapshotTests' || '' }}
      - name: Publish Test Report
        if: ${{ !cancelled() }}
        uses: gmazzo/publish-report-annotations@v1
        with:
          checkName: Screenshot Tests Results
      - name: Archive test results
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: results
          path: '**/build/outputs/*-results/'
      - name: Update Screenshots
        if: ${{ fromJSON(env.UPDATE_SCREENSHOTS) }}
        env:
          BRANCH: ${{ github.event.pull_request.head.ref }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github.actions@users.noreply.github.com"
          
          git fetch origin "$BRANCH:refs/remotes/origin/$BRANCH"
          git checkout "$BRANCH"
          git add '**/src/*/screenshotTest/**' '**/src/androidTest/assets/screenshots/**' || exit 0
          git commit -m "Updated screenshots" && git push origin

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [ build, screenshot-tests ]
    if: ${{ github.event_name == 'release' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup host
        uses: ./.github/actions/setup-host
        with:
          gradle-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
      - name: Publish to Google Play
        env:
          ANDROID_PUBLISHER_CREDENTIALS: ${{ secrets.ANDROID_PUBLISHER_CREDENTIALS }}
        run: |
          ./gradlew \
            publishReleaseBundle --track=internal \
            promoteArtifact --from-track=internal --promote-track=production

  actionlint:
    name: Validate Workflows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download actionlint
        shell: bash
        run: bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
      - name: Check workflow files
        shell: bash
        run: ./actionlint -color -format '{{range $err := .}}::error file={{$err.Filepath}},line={{$err.Line}},col={{$err.Column}}::{{$err.Message}}%0A```%0A{{replace $err.Snippet "\\n" "%0A"}}%0A```\n{{end}}' -ignore 'SC2016:'
